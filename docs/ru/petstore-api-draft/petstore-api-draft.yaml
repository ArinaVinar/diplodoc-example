openapi: 3.0.0
info:
  version: 1.0.0
  title: Swagger Petstore Draft
  license:
    name: MIT
servers:
  - url: http://petstore.swagger.io/v1
    description: Production server
  - url: http://staging.petstore.swagger.io/v1
    description: Staging server

components:
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      name: X-API-Key
      in: header
      description: API ключ для доступа к защищенным операциям

  schemas:
    Pet:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: Уникальный идентификатор питомца
        name:
          type: string
          description: Имя питомца
        tag:
          type: string
          description: Категория питомца (например, "собака", "кошка")
      example:
        id: 12345
        name: "Барсик"
        tag: "кошка"

    Pets:
      type: array
      maxItems: 100
      items:
        $ref: '#/components/schemas/Pet'
      description: Список питомцев с пагинацией

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: Код ошибки
        message:
          type: string
          description: Описание ошибки
      example:
        code: 404
        message: "Питомец не найден"

security:
  - apiKeyAuth: []
paths:
  /pets:
    get:
      summary: 'Получить список питомцев'
      description: 'Возвращает список всех питомцев'
      operationId: listPets
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: 'Ограничение количества возвращаемых результатов (максимум 100)'
          required: false
          schema:
            type: integer
            maximum: 100
            format: int32
      responses:
        '200':
          description: 'Успешный ответ со списком питомцев'
          headers:
            x-next:
              description: 'Ссылка на следующую страницу результатов'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pets'
        default:
          description: 'Непредвиденная ошибка'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: 'Создать нового питомца'
      description: 'Добавляет нового питомца'
      operationId: createPets
      tags:
        - pets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '201':
          description: 'Питомец успешно создан'
        default:
          description: 'Непредвиденная ошибка'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pets/{petId}:
    get:
      summary: 'Получить информацию о питомце'
      description: 'Возвращает полную информацию о конкретном питомце по его ID'
      operationId: showPetById
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          required: true
          description: 'ID питомца'
          schema:
            type: string
      responses:
        '200':
          description: 'Успешный ответ с данными питомца'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: 'Неверный ID питомца'
        '404':
          description: 'Питомец не найден'
        default:
          description: 'Непредвиденная ошибка'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'